[
  {
    "kind": 1,
    "language": "markdown",
    "value": "**Core Steps**\r\n\r\n1. Create Game Window\r\n2. Create Enivronment\r\n3. Create Character\r\n4. Generate Platforms\r\n5. Get the Character to Move\r\n6. Make the Character Jump\r\n7. Detect Collision with Platforms\r\n8. Implement Score System\r\n9. Create Start and End Screens"
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "**1. Create Game Window**"
  },
  {
    "kind": 2,
    "language": "javascript",
    "value": "function gameWindow(){\n    push();\n    noStroke();\n    fill(20);\n    rect(0, 0, width, 20);\n    rect(0, 0, 20, height);\n    rect(width - 20, 0, 20, height);\n    rect(0, height - 20, width, 20);\n    stroke(125);\n    strokeWeight(1);\n    noFill();\n    rect(10, 10, width - 20, height - 20);\n    rect(20, 20, width - 40, height - 40);\n    pop();\n}\n\nfunction setup(){\n    createCanvas(600, 800);\n}\n\nfunction draw(){\n    background(20);\n    gameWindow();\n}"
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "**2. Create Environment**"
  },
  {
    "kind": 2,
    "language": "javascript",
    "value": "function setup(){\n    createCanvas(600, 800);\n}\n\nfunction draw(){\n    background(20);\n    gameWindow();\n}"
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "**3. Create Character**"
  },
  {
    "kind": 2,
    "language": "javascript",
    "value": "let mainCharacter;\n\nclass Character{\n    constructor(x, y){\n        this.positionX = x;\n        this.positionY = y;\n        this.velocity = 5;\n        this.acceleration = 0;\n    }\n    move(){\n        this.positionX += this.velocity;\n        if(this.positionX > width + 20){\n            this.positionX = 0;\n        }\n    }\n    accelerate(){\n        this.velocity += this.acceleration;\n    }\n    jump(){\n        \n    }\n    draw(){\n        push();\n        stroke(150);\n        strokeWeight(2);\n        fill(20);\n        translate (this.positionX, height - this.positionY);\n        ellipse(0,0,40);\n        pop();\n    }\n}\n\nfunction initializeCharacter(){\n    mainCharacter = new Character(45, 285);\n}\n\nfunction drawCharacter (){\n    mainCharacter.draw();\n}\n\nfunction setup(){\n    createCanvas(600, 800);\n    initializeCharacter();\n}\n\nfunction draw(){\n    background(20);\n    gameWindow();\n    drawCharacter();\n}"
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "**4. Generate Platforms**"
  },
  {
    "kind": 2,
    "language": "javascript",
    "value": "let visiblePlatforms = [];\n\nclass Platform{\n    constructor(x, y, gap){\n        this.centerX = x ;\n        this.centerY = y ;\n        this.gapWidth = gap;\n        this.verticalVelocity = 8;\n    }\n\n    moveDown(){\n        this.centerY += this.verticalVelocity;\n    }\n\n    moveUp(){\n        this.centerY -= this.verticalVelocity;\n    }\n\n    draw(){\n        push();\n        translate (this.centerX, this.centerY);\n        stroke(100);\n        noFill();\n        rect(-(this.gapWidth / 2) - 600, -20, 600, 40, 10);\n        rect(+(this.gapWidth / 2), -20, 600, 40, 10);\n        pop();  \n    }\n}\n\nfunction initializePlatforms(){\n    for(let iterator = 1; iterator <= 6; iterator++){\n        visiblePlatforms.push(new Platform(Math.floor(Math.random() * (width - 220)) + 100, Math.floor(height * iterator / 5) - 240, Math.floor(Math.random() * 40) + 80));\n    }\n    visiblePlatforms[4] = new Platform(0, visiblePlatforms[4].centerY, 0); // The first platform should not have a gap in it\n}\n\nfunction drawPlatforms(){\n    for(let platform of visiblePlatforms){\n        platform.draw();\n    }\n}\n\nfunction setup(){\n    createCanvas(600, 800);\n    initializePlatforms();\n}\n\nfunction draw(){\n    background(20);\n    drawPlatforms();\n    gameWindow();\n    drawCharacter(45,285);\n}"
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "**5. Get the Character to Move**"
  },
  {
    "kind": 2,
    "language": "javascript",
    "value": "function setup(){\n    createCanvas(600, 800);\n    initializePlatforms();\n    initializeCharacter();\n}\n\nfunction draw(){\n    background(20);\n    drawPlatforms();\n    mainCharacter.move();\n    drawCharacter();\n    gameWindow();\n\n}"
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "**6. Make the Character Jump**"
  },
  {
    "kind": 2,
    "language": "javascript",
    "value": "let gameState = \"running\";\nlet animationFrame = 0;\n\nfunction checkInput(){\n    if(keyIsPressed || touches.length >= 1){\n        if(key === \" \" || touches.length >= 1){\n            switch(gameState){\n                case \"start\":\n                    gameState = \"running\";\n                    break;\n                case \"running\":\n                    gameState = \"jumping\";\n                    break;\n                case \"jumping\":\n                    break;\n                case \"end\":\n                    gameState = \"start\";\n                    score = 0;\n                    visiblePlatforms = [];\n                    initializePlatforms();\n                    initializeCharacter();\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n}\n\nfunction setup(){\n    createCanvas(600, 800);\n    initializePlatforms();\n    initializeCharacter();\n}\n\nfunction draw(){\n    switch(gameState){\n        case \"start\":\n            break;\n        case \"running\":\n            background(20);\n            drawPlatforms();\n            mainCharacter.move();\n            drawCharacter();\n            gameWindow();\n            break;\n        case \"jumping\":\n            background(20);\n            for(let platform of visiblePlatforms){\n                platform.moveDown();\n            }\n            drawPlatforms();\n            mainCharacter.move();            \n            drawCharacter();\n            gameWindow();\n            animationFrame++;\n            if(animationFrame == 20){\n                gameState = \"running\";\n                animationFrame = 0;\n                visiblePlatforms.pop();\n                visiblePlatforms.unshift(new Platform(Math.floor(Math.random() * (width - 220)) + 100, Math.floor(height / 5) - 240, Math.floor(Math.random() * 40) + 80));\n                break;\n            }\n            if((animationFrame > 10) && ((mainCharacter.positionX < 20 + visiblePlatforms[3].centerX - visiblePlatforms[3].gapWidth / 2) || (mainCharacter.positionX > (visiblePlatforms[3].centerX + visiblePlatforms[3].gapWidth / 2) - 20))){\n                gameState = \"end\";\n                // In this case we have lost\n            }\n            break;\n        case \"end\":\n            break;\n        default:\n            break;\n    }\n    checkInput();\n}"
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "**7. Detect Collision with Platforms**"
  },
  {
    "kind": 2,
    "language": "javascript",
    "value": "// Filled inside the previous code"
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "**8.Implement score System**"
  },
  {
    "kind": 2,
    "language": "javascript",
    "value": "let score = 0;\nfunction showScore (){\n    push();\n    fill (155);\n    textFont(\"Helvetica\");\n    textSize (32);\n    text(score, 286, 150);\n    pop();\n}\n\nfunction setup(){\n    createCanvas(600, 800);\n    initializePlatforms();\n    initializeCharacter();\n}\n\nfunction draw(){\n    switch(gameState){\n        case \"start\":\n            break;\n        case \"running\":\n            background(20);\n            drawPlatforms();\n            mainCharacter.move();\n            drawCharacter();\n            gameWindow();\n            showScore();\n            if(((mainCharacter.positionX > 10 + visiblePlatforms[4].centerX - visiblePlatforms[4].gapWidth / 2) && (mainCharacter.positionX < (visiblePlatforms[4].centerX + visiblePlatforms[4].gapWidth / 2) - 10))){\n                gameState = \"end\";\n                // In this case we have lost\n            }\n             break;\n        case \"jumping\":\n            background(20);\n            for(let platform of visiblePlatforms){\n                platform.moveDown();\n            }\n            drawPlatforms();\n            mainCharacter.move();            \n            drawCharacter();\n            gameWindow();\n            animationFrame++;\n            if(animationFrame == 20){\n                gameState = \"running\";\n                animationFrame = 0;\n                visiblePlatforms.pop();\n                visiblePlatforms.unshift(new Platform(Math.floor(Math.random() * (width - 220)) + 100, Math.floor(height / 5) - 240, Math.floor(Math.random() * 40) + 80));\n                score++;\n                break;\n            }\n            if((animationFrame > 10) && ((mainCharacter.positionX < 10 + visiblePlatforms[3].centerX - visiblePlatforms[3].gapWidth / 2) || (mainCharacter.positionX > (visiblePlatforms[3].centerX + visiblePlatforms[3].gapWidth / 2) - 10))){\n                gameState = \"end\";\n                // In this case we have lost\n            }\n            showScore();\n            break;\n        case \"end\":\n            break;\n        default:\n            break;\n    }\n    checkInput();\n}"
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "**9. Create Start and End Screens**"
  },
  {
    "kind": 2,
    "language": "javascript",
    "value": "gameState = \"start\";\n\nfunction instructions(){\n    push();\n    fill(20);\n    stroke(125);\n    rect(150, 150, 300, 200);\n    fill(200);\n    textSize(36);\n    text(\"Press Space\", 200, 260);\n    pop();\n}\n\nfunction gameOver(){\n    push();\n    fill(20);\n    stroke(125);\n    rect(100, 100, 400, 250);\n    fill(200);\n    textSize(30);\n    text(\"Game Over\", 230, 200);\n    textSize(20);\n    text(\"Press Space To Try Again\", 190, 300);\n    pop();\n}\n\n\n\n\nfunction setup(){\n    createCanvas(600, 800);\n    initializePlatforms();\n    initializeCharacter();\n}\n\nfunction draw(){\n    switch(gameState){\n        case \"start\":\n            background(20);\n            drawPlatforms();\n            mainCharacter.move();  \n            drawCharacter();\n            gameWindow();\n            instructions();\n            break;\n        case \"running\":\n            background(20);\n            drawPlatforms();\n            mainCharacter.move();\n            drawCharacter();\n            gameWindow();\n            showScore();\n            if(((mainCharacter.positionX > 40 + visiblePlatforms[4].centerX - visiblePlatforms[4].gapWidth / 2) && (mainCharacter.positionX < (visiblePlatforms[4].centerX + visiblePlatforms[4].gapWidth / 2) - 40))){\n                gameState = \"end\";\n                // In this case we have lost\n            }\n             break;\n        case \"jumping\":\n            background(20);\n            for(let platform of visiblePlatforms){\n                platform.moveDown();\n            }\n            drawPlatforms();\n            mainCharacter.move();            \n            drawCharacter();\n            gameWindow();\n            animationFrame++;\n            if(animationFrame == 20){\n                gameState = \"running\";\n                animationFrame = 0;\n                visiblePlatforms.pop();\n                visiblePlatforms.unshift(new Platform(Math.floor(Math.random() * (width - 220)) + 100, Math.floor(height / 5) - 240, Math.floor(Math.random() * 40) + 80));\n                score++;\n                break;\n            }\n            if((animationFrame > 10) && ((mainCharacter.positionX < 10 + visiblePlatforms[3].centerX - visiblePlatforms[3].gapWidth / 2) || (mainCharacter.positionX > (visiblePlatforms[3].centerX + visiblePlatforms[3].gapWidth / 2) - 10))){\n                gameState = \"end\";\n                animationFrame = 0;\n                // In this case we have lost\n            }\n            showScore();\n            break;\n        case \"end\":\n            gameOver();\n            break;\n        default:\n            break;\n    }\n    checkInput();\n}"
  }
]